{"version":3,"sources":["./src/app/account/layout.component.html","./src/app/account/login.component.html","./src/app/account/register.component.html","./src/app/account/account-routing.module.ts","./src/app/account/account.module.ts","./src/app/account/layout.component.ts","./src/app/account/login.component.ts","./src/app/account/register.component.ts"],"names":[],"mappings":"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","file":"account-account-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"box-position\\\">\\n        <router-outlet></router-outlet>\\n    </div>\\n</div>\"","module.exports = \"<div class=\\\"card box-background\\\">\\n    <div class=\\\"happy-card card-body\\\">\\n        <div class=\\\"text-center mt-4 mb-4\\\">\\n            <img src=\\\"assets/logo-Raize.png\\\" alt=\\\"Raize\\\" height=\\\"60px\\\" width=\\\"60px\\\" />\\n            <h3 class=\\\"purple pt-4\\\">Login to Raize</h3>\\n        </div>\\n        <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"username\\\" class=\\\"purple\\\">Username</label>\\n                <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control yellow\\\" [ngClass]=\\\"{ 'curved-input': true, 'is-invalid': submitted && f.username.errors }\\\" />\\n                <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"password\\\" class=\\\"purple\\\">Password</label>\\n                <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control yellow\\\" [ngClass]=\\\"{'curved-input': true, 'is-invalid': submitted && f.password.errors }\\\" />\\n                <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group text-center\\\">\\n                <button [disabled]=\\\"loading\\\" class=\\\"btn btn-warning btn-sm btn-block login curved-input user-button\\\">\\n                    <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n                    Sign In\\n                </button>\\n                <a href=\\\"#\\\" class=\\\"btn btn-link text-secondary mt-3 purple\\\">Forgot Password?</a>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n<div class=\\\"mt-4 text-center\\\">\\n    <p class=\\\"purple\\\"><small>Do not have account?</small></p>\\n    <a routerLink=\\\"../register\\\" class=\\\"btn btn-link register btn-sm curved-input user-button\\\">Sign Up</a>\\n    <p class=\\\"mt-2 purple\\\"><small>Don't worry. It's <b>FREE</b></small></p>\\n</div>\"","module.exports = \"<div class=\\\"signup-pane\\\">\\n    <div class=\\\"card box-background register-card\\\">\\n        <div class=\\\"happy-card card-body\\\">\\n            <div class=\\\"text-center mt-4 mb-4\\\">\\n                <img src=\\\"assets/logo-Raize.png\\\" alt=\\\"Raize\\\" height=\\\"60px\\\" width=\\\"60px\\\" />\\n                <h3 class=\\\"purple pt-4\\\">Sign Up to Raize</h3>\\n            </div>\\n            <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"username\\\" class=\\\"purple\\\">Username</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control curved-input\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"firstName\\\" class=\\\"purple\\\">First Name</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control curved-input\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"lastName\\\" class=\\\"purple\\\">Last Name</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control curved-input\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"telephone\\\" class=\\\"purple\\\">Telephone</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"telephone\\\" class=\\\"form-control curved-input\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.telephone.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.telephone.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.telephone.errors.required\\\">Telephone number is required.</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"email\\\" class=\\\"purple\\\">Email Address</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control curved-input\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.email.errors.required\\\">Email Id is required.</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"password\\\" class=\\\"purple\\\">Password</label>\\n                    <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control curved-input\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                        <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"confirmPassword\\\" class=\\\"purple\\\">Confirm Password</label>\\n                    <input type=\\\"password\\\" formControlName=\\\"confirmPassword\\\" class=\\\"form-control curved-input\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.confirmPassword.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.confirmPassword.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.confirmPassword.errors.required\\\">Confirm password is required</div>\\n                        <div *ngIf=\\\"f.confirmPassword.errors.minlength\\\">Password must be at least 6 characters</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group text-center\\\">\\n                    <button [disabled]=\\\"loading\\\" class=\\\"btn btn-warning btn-sm register curved-input user-button mt-3\\\">\\n                        <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n                        Sign Up\\n                    </button>\\n                    <p>\\n                        <a routerLink=\\\"../login\\\" class=\\\"btn btn-link purple\\\">Cancel</a>\\n                    </p>\\n                </div>\\n            </form>\\n        </div>\\n    </div>\\n</div>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LayoutComponent } from './layout.component';\nimport { LoginComponent } from './login.component';\nimport { RegisterComponent } from './register.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: LayoutComponent,\n        children: [\n            { path: 'login', component: LoginComponent },\n            { path: 'register', component: RegisterComponent }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AccountRoutingModule { }","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { LayoutComponent } from './layout.component';\nimport { LoginComponent } from './login.component';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        AccountRoutingModule\n    ],\n    declarations: [\n        LayoutComponent,\n        LoginComponent,\n        RegisterComponent\n    ]\n})\nexport class AccountModule { }","import { Component } from '@angular/core';\n\n@Component({ templateUrl: 'layout.component.html' })\nexport class LayoutComponent { }","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '../_services';\n\n@Component({ templateUrl: 'login.component.html' })\nexport class LoginComponent implements OnInit {\n    loginForm: FormGroup;\n    loading = false;\n    submitted = false;\n    returnUrl: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) {\n        // redirect to home if already logged in\n        if (this.accountService.userValue) {\n            this.router.navigate(['/']);\n        }\n    }\n\n    ngOnInit() {\n        this.loginForm = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '../_services';\n\n@Component({ templateUrl: 'register.component.html' })\nexport class RegisterComponent implements OnInit {\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) {\n        // redirect to home if already logged in\n        if (this.accountService.userValue) {\n            this.router.navigate(['/']);\n        }\n    }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            username: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6)]],\n            confirmPassword: ['', [Validators.required, Validators.minLength(6)]],\n            telephone: ['', Validators.required],\n            email: ['', Validators.required]\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.register(this.form.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.alertService.success('Registration successful', { keepAfterRouteChange: true });\n                    this.router.navigate(['../login'], { relativeTo: this.route });\n                },\n                error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n}\n"],"sourceRoot":"webpack:///"}